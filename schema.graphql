type IBondingCurveFactory_Create {
  id: ID!
  owner: String!
  curve: String!
  token: String!
  tokenURI: String!
  name: String!
  symbol: String!
  virtualNative: BigInt!
  virtualToken: BigInt!
}

type BondingCurve_Buy {
  id: ID!
  sender: String!
  token: String!
  amountIn: BigInt!
  amountOut: BigInt!
}

type BondingCurve_Sell {
  id: ID!
  sender: String!
  token: String!
  amountIn: BigInt!
  amountOut: BigInt!
}

type BondingCurve_Sync {
  id: ID!
  token: String!
  reserveWNative: BigInt!
  reserveToken: BigInt!
  virtualWNative: BigInt!
}

type BondingCurve_Listing {
  id: ID!
  curve: String!
  token: String!
  pair: String!
  listingWNativeAmount: BigInt!
  listingTokenAmount: BigInt!
  burnLiquidity: BigInt!
}
type BondingCurve_Lock {
  id: ID!
  token: String!
}

type IBondingCurveFactory_SetCore {
  id: ID!
  core: String!
}

type IBondingCurveFactory_SetDexFactory {
  id: ID!
  dexFactory: String!
}

type IBondingCurveFactory_SetInitialize {
  id: ID!
  deployFee: BigInt!
  listingFee: BigInt!
  tokenTotalSupply: BigInt!
  virtualNative: BigInt!
  virtualToken: BigInt!
  k: BigInt!
  targetToken: BigInt!
  feeNumerator: BigInt!
  feeDominator: BigInt!
  dexFactory: String!
}

type UniswapV2Factory_PairCreated {
  id: ID!
  token0: String!
  token1: String!
  pair: String!
  _3: BigInt!
}

type UniswapV2Pair_Sync {
  id: ID!
  pair: String!
  reserve0: BigInt!
  reserve1: BigInt!
}
